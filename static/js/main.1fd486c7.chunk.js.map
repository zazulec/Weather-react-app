{"version":3,"sources":["pages/Home/styled/StyledTags.js","pages/Home/styled/StyledWrapper.js","pages/Home/styled/StyledCurrentWeatherContainer.js","pages/Home/styled/StyledWeatherInfo.js","pages/Home/styled/StyledButton.js","pages/Home/styled/StyledData.js","pages/Home/styled/StyledText.js","pages/Home/Home.js","components/Header/styled/StyledHeader.js","components/Header/Header.js","pages/DefaultPage/styled/StyledDefaultPage.js","pages/DefaultPage/DefaultPage.js","context/RechartInputContext.js","components/WeatherRechart/styled/StyledWeatherRechart.js","components/WeatherRechart/WeatherRechart.js","components/RechartInput/styled/StyledRechartInput.js","components/RechartInput/RechartInput.js","pages/FiveDaysForecast/styled/StyledFiveDaysForecast.js","pages/FiveDaysForecast/styled/StyledButton.js","pages/FiveDaysForecast/styled/StyledText.js","pages/FiveDaysForecast/FiveDaysForecast.js","components/SiteNavigation/styled/StyledNavigation.js","components/SiteNavigation/SiteNavigation.js","components/CurrentWeatherWithGeoLocation/styled/StyledButton.js","components/CurrentWeatherWithGeoLocation/styled/StyledCurrentWeatherWithGeoLocation.js","components/CurrentWeatherWithGeoLocation/styled/StyledWeatherInfo.js","components/CurrentWeatherWithGeoLocation/styled/StyledData.js","components/CurrentWeatherWithGeoLocation/styled/StyledText.js","components/CurrentWeatherWithGeoLocation/CurrentWeatherWithGeoLocation.js","pages/CurrentWeatherWithLocation/styled/Wrapper.js","pages/CurrentWeatherWithLocation/CurrentWeatherWithLocation.js","App/style/StyledApp.js","App/style/StyledOverlay.js","App/App.js","serviceWorker.js","index.js"],"names":["H1","styled","h1","H3","h3","Wrapper","div","CurrentWeatherContainer","WeatherInfo","Button","button","Data","Text","Home","state","data","getInitialDataState","isLoaded","error","inputCity","getWeatherData","FETCH_URL_DAY","fetch","then","response","json","result","cod","setState","catch","handleCurrentWeatherInput","event","preventDefault","target","value","makeCurrentWeatherFetch","weather","main","temp","feels_like","wind","speed","deg","name","this","cityName","currentTemp","sensedTemp","Math","round","windSpeed","windDirection","description","map","element","key","id","isInputCityEntered","Input","onChange","placeholder","onClick","style","transform","FormControl","city","color","variant","Component","HeaderH1","Header","Title","DefaultPage","RechartInputContext","createContext","Overlay","WeatherRechart","props","rechartInputData","useContext","list","filter","dt_txt","includes","toString","slice","temperature","sensedTemperature","amt","aspect","width","height","verticalAlign","type","dataKey","stroke","ill","fill","strokeDasharray","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","RechartInput","classes","setRechartInputData","dayOne","dayTwo","dayThree","dayFour","dayFive","className","form","InputLabel","Select","labelId","MenuItem","aria-label","defaultValue","p","FiveDaysForecast","getInitialDataStateForFiveDays","handleForecastInput","makeForecastFetch","getFiveDaysForecast","FETCH_URL_FIVE_DAYS","context","length","contextType","Navigation","a","SiteNavigation","as","href","ButtonDisabled","CurrentWeatherWithGeoLocation","isLoading","locationLoaded","latitude","longitude","getGeoPosition","navigator","geolocation","getCurrentPosition","position","coords","getCurrentWeatherWithGeoLocation","FETCH_URL_GEOLOCATION","loadingGeoLocalisation","showGetCurrentWeatherButton","disabled","isFetchDataLoaded","CurrentWeatherWithLocation","StyledNav","App","useState","rechartProviderValue","useMemo","Provider","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.1fd486c7.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const H1 = styled.h1`\n    text-align: center;\n    font-size: 30px;\n    padding: 20px;\n\n`\nexport const H3 = styled.h3`\n    display: flex;\n    flex-direction: column;\n    align-item: center;\n    justify-content: center;\n    font-size: 20px;\n    \n`\n\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div `\n    display: flex;\n    flex-direction: column;\n    align-items: baseline;\n    width: 100%;\n    height: 100vh;\n    color: white;\n    text-shadow: 2px 2px 0px rgba(184,134,11,0.79); \n    \n`\n","import styled from 'styled-components';\n\n\nexport const CurrentWeatherContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-context: center;\n    flex-direction: column;\n    width: 100%;\n\n`\n\n","import styled from 'styled-components';\n\nexport const WeatherInfo = styled.div`\n    display: flex;\n    flex-direction: column;\n    padding: 10px;\n    color: white;\n    text-align: center;\n    width: 100%;\n    \n`\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n    color: white;\n    background-color: rgba(184,134,11);\n    border-radius: 10px;\n    cursor: pointer;\n    border: none;\n    padding: 10px 26px;\n    font-size: 14px;\n    margin: 10px;\n    outline: none;\n    \n`","import styled from 'styled-components';\n\nexport const Data = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 10px;\n    font-size: 20px;\n    \n`","import styled from 'styled-components';\n\nexport const Text = styled.div`\n    margin: 0;\n    padding-top: 10px;\n    font-size: 16px;\n\n`","import React, { Component } from 'react';\nimport { Input, FormControl } from '@material-ui/core';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport { H1, H3 } from './styled/StyledTags';\nimport { Wrapper } from './styled/StyledWrapper';\nimport { CurrentWeatherContainer } from './styled/StyledCurrentWeatherContainer';\nimport { WeatherInfo } from './styled/StyledWeatherInfo';\nimport { Button } from './styled/StyledButton';\nimport { Data } from './styled/StyledData';\nimport { Text } from './styled/StyledText';\n\nclass Home extends Component {\n\n    state = {\n        data: this.getInitialDataState(),\n        isLoaded: false,\n        error: null,\n        inputCity: '',\n    };\n\n    getInitialDataState() {\n        return {\n            weather: [],\n            main: {\n                temp: null,\n                feels_like: null,\n            },\n            wind: {\n                speed: null,\n                deg: null,\n            },\n            name: \"\",\n        }\n    };\n\n    getWeatherData = () => {\n        this.FETCH_URL_DAY = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.inputCity}&units=metric&appid=2e2ff6c3d5791be198f04c78b94573e5`\n\n        fetch(this.FETCH_URL_DAY)\n            .then(response => (response.json()))\n            .then(result => {\n                if (result.cod === 200) {\n                    this.setState({\n                        isLoaded: true,\n                        data: result,\n                    })\n                } else {\n                    this.setState({\n                        isLoaded: true,\n                    })\n                }\n            })\n            .catch(error => {\n                this.setState({\n                    data: this.getInitialDataState(),\n                    isLoaded: true,\n                    error\n                });\n            })\n    };\n\n    handleCurrentWeatherInput = (event) => {\n        event.preventDefault()\n        this.setState({ inputCity: event.target.value })\n    }\n\n    makeCurrentWeatherFetch = () => {\n        this.getWeatherData()\n        this.setState({ inputCity: '' })\n    }\n\n    render() {\n        const { data, isLoaded } = this.state;\n        const cityName = data.name;\n        const currentTemp = data.main.temp;\n        const sensedTemp = Math.round(data.main.feels_like);\n        const windSpeed = data.wind.speed;\n        const windDirection = data.wind.deg;\n        const description = data.weather.map(element =>\n            <div key={element.id}>\n                {element.description}\n            </div>\n        )\n        const isInputCityEntered = isLoaded ?\n            <>\n                <CurrentWeatherContainer>\n                    <H1>Choose your city:</H1>\n                    <Input\n                        value={this.state.inputCity}\n                        onChange={this.handleCurrentWeatherInput}\n                        placeholder=\"Insert city name here\">\n                    </Input>\n                    <Button\n                        onClick={this.makeCurrentWeatherFetch}>\n                        Get current weather\n                    </Button>\n                </CurrentWeatherContainer>\n                <WeatherInfo>\n                    {cityName ?\n                        <H3>\n                            Current weather in city:\n                            <Text>{cityName}</Text>\n                        </H3>\n                        :\n                        <H3> Please insert city name or write it corectly.</H3>}\n                    <Data>\n                        Current temperature:\n                        <Text>{currentTemp} &deg;C</Text>\n                    </Data>\n                    <Data>\n                        Sensed temperature:\n                        <Text>{sensedTemp} &deg;C</Text>\n                    </Data>\n                    <Data>\n                        Wind speed:\n                        <Text>{`${windSpeed} km/h`}</Text>\n                    </Data>\n                    <Data>\n                        Wind direction:\n                        <Text>\n                            <ArrowUpwardIcon\n                                style={{ transform: `rotate(${windDirection}deg)` }} >\n                            </ArrowUpwardIcon>\n                        </Text>\n                    </Data>\n                    <Data>\n                        Description:\n                        <Text>{description}</Text>\n                    </Data>\n                </WeatherInfo>\n            </>\n            :\n            <>\n                <CurrentWeatherContainer>\n                    <H1>Choose your city</H1>\n                    <FormControl>\n                        <Input\n                            value={this.state.city}\n                            onChange={this.handleCurrentWeatherInput}\n                            placeholder=\"Insert city name here\">\n                        </Input>\n                        <Button\n                            color=\"disable\"\n                            variant=\"contained\"\n                            onClick={this.makeCurrentWeatherFetch}>\n                            Get current weather\n                        </Button>\n                    </FormControl>\n                    <H1>No city entered</H1>\n                </CurrentWeatherContainer>\n            </>\n\n\n        return (\n            <Wrapper>\n                {isInputCityEntered}\n            </Wrapper>\n        )\n    }\n}\n\nexport default Home;","import styled from 'styled-components';\n\nexport const HeaderH1 = styled.h1 `\n\n    display: flex;\n    align-items: center;\n    text-align: center;\n    justify-content: center;\n    font-size: 30px;\n    pading: 10px; \n    color: darkgoldenrod;\n    margin: 0;\n    color: white;\n    text-shadow: 2px 2px 0px rgba(184,134,11,0.79);\n\n@media (min-width: 880px) {\n        font-size: 42px;\n\n};\n\n@media (min-width: 1025px) { \n        font-size: 50px;\n\n};\n\n`","import React from 'react';\nimport { HeaderH1 } from './styled/StyledHeader';\n\nfunction Header() {\n\n    return (\n            <HeaderH1>\n                Probably the best weather app in this repository!\n            </HeaderH1>\n    )\n}\n\nexport default Header;","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n    display: flex;\n    text-align: center;\n    justify-content: center;\n    font-size: 50px;\n    pading: 10px; \n`","import React, { Component } from 'react';\nimport { Title } from './styled/StyledDefaultPage';\n\nclass DefaultPage extends Component {\n    render() {\n        return (\n            <Title>\n                <p>\n                    404\n                    <br></br>\n                    Ups, you got lost!\n                    <br></br>\n                    You are on the wrong path. Please try repair Url address.\n                </p>\n            </Title>\n        )\n    }\n}\n\nexport default DefaultPage;","import { createContext } from 'react';\n\nconst RechartInputContext = createContext('');\n\nexport default RechartInputContext;","import styled from 'styled-components';\n\nexport const Overlay = styled.div`\n    background-color: rgba(0, 0, 0, 0.1);\n    width: 100%;\n    height: 100%;\n    margin-top: 20px;\n    \n`\n\n","import React, { useContext } from 'react';\nimport RechartInputContext from '../../context/RechartInputContext'\nimport { LineChart, Line, ResponsiveContainer, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { Overlay } from './styled/StyledWeatherRechart';\n\n\nfunction WeatherRechart(props) {\n\n    const { rechartInputData } = useContext(RechartInputContext);\n    const data = props.data.list\n        .filter(element => element.dt_txt.includes(rechartInputData))\n        .map(element => {\n            return {\n                name: element.dt_txt.toString().slice(10, 16),\n                temperature: element.main.temp,\n                sensedTemperature: element.main.feels_like, amt: 60\n            }\n        });\n\n    return (\n        <div>\n            <Overlay>\n                <ResponsiveContainer aspect={5} width=\"100%\" height=\"100%\">\n                    <LineChart width={50} height={50} data={rechartInputData ? data : null}>\n                        <Legend verticalAlign=\"top\" height={36} />\n                        <Line\n                            name='Temperature'\n                            type=\"monotone\"\n                            dataKey=\"temperature\"\n                            stroke=\"#8884d8\"\n                            ill=\"#8884d8\" />\n                        <Line\n                            name='Sensed temperature'\n                            type=\"monotone\"\n                            dataKey=\"sensedTemperature\"\n                            stroke=\"pink\" fill=\"pink\" />\n                        <CartesianGrid\n                            stroke=\"#ccc\"\n                            strokeDasharray=\"5 5\" />\n                        <XAxis dataKey=\"name\" />\n                        <YAxis />\n                        <Tooltip />\n                    </LineChart>\n                </ResponsiveContainer>\n            </Overlay>\n        </div>\n\n    );\n}\n\nexport default WeatherRechart;","import styled from 'styled-components';\n\nexport const Text = styled.div`\ncolor: white;\n\n`\n","import React, { useContext } from 'react';\nimport RechartInputContext from '../../context/RechartInputContext';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { Text } from './styled/StyledRechartInput';\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\nexport default function RechartInput(props) {\n\n    const classes = useStyles();\n    const { rechartInputData, setRechartInputData } = useContext(RechartInputContext);\n    const dayOne = props.data.list[0].dt_txt.toString().slice(0, -9);\n    const dayTwo = props.data.list[0 + 8].dt_txt.toString().slice(0, -9);\n    const dayThree = props.data.list[0 + 16].dt_txt.toString().slice(0, -9);\n    const dayFour = props.data.list[0 + 24].dt_txt.toString().slice(0, -9);\n    const dayFive = props.data.list[0 + 32].dt_txt.toString().slice(0, -9);\n\n    const handleInputChange = (event) => {\n        setRechartInputData(event.target.value);\n    };\n\n    return (\n        <div>\n            <FormControl className={classes.form} >\n                <InputLabel\n                    id=\"demo-simple-select-helper-label\"\n                    style={{ color: 'white' }}>\n                    Data\n                </InputLabel>\n                <Select\n                    labelId=\"demo-simple-select-helper-label\"\n                    id=\"demo-simple-select-helper\"\n                    value={rechartInputData}\n                    onChange={handleInputChange}\n                    style={{ color: 'white' }}\n                >\n                    <MenuItem aria-label={\"None\"} defaultValue=\"\">None</MenuItem>\n                    <MenuItem value={dayOne.toString()}>{dayOne}</MenuItem>\n                    <MenuItem value={dayTwo.toString()}>{dayTwo}</MenuItem>\n                    <MenuItem value={dayThree.toString()}>{dayThree}</MenuItem>\n                    <MenuItem value={dayFour.toString()}>{dayFour}</MenuItem>\n                    <MenuItem value={dayFive.toString()}>{dayFive}</MenuItem>\n                </Select>\n                <Text>\n                    Chose data to display forecast\n                </Text>\n            </FormControl>\n        </div>\n\n\n    );\n}","import styled from 'styled-components';\n\nexport const Wrapper = styled.div `\n    display: flex;\n    justify-context: center;\n    flex-direction: column;\n    text-align: center;\n    height: 100vh;\n    width: 100%;\n    color: white;\n    \n`\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n    color: white;\n    background-color: rgba(184,134,11);\n    border-radius: 10px;\n    cursor: pointer;\n    border: none;\n    padding: 10px 26px;\n    font-size: 14px;\n    margin: 10px;\n    outline: none;\n    \n`","import styled from 'styled-components';\n\nexport const Text = styled.p`\n    padding: 10px;\n    \n`","import React, { Component } from 'react';\nimport { Input, FormControl } from '@material-ui/core';\nimport WeatherRechart from '../../components/WeatherRechart/WeatherRechart';\nimport RechartInput from '../../components/RechartInput/RechartInput';\nimport RechartInputContext from '../../context/RechartInputContext';\nimport { Wrapper } from './styled/StyledFiveDaysForecast';\nimport { Button } from './styled/StyledButton';\nimport { H1, H3 } from '../Home/styled/StyledTags';\nimport { Text } from './styled/StyledText';\n\nclass FiveDaysForecast extends Component {\n\n    state = {\n        data: this.getInitialDataStateForFiveDays(),\n        isLoaded: false,\n        error: null,\n        inputCity: '',\n\n    };\n\n    getInitialDataStateForFiveDays() {\n        return {\n            list: [],\n            weather: [],\n            main: {\n                temp: null,\n                feels_like: null,\n            },\n            wind: {\n                speed: null,\n                deg: null,\n            },\n            city: {\n                name: '',\n            },\n            dt_txt: '',\n        }\n    };\n\n    getFiveDaysForecast() {\n        this.FETCH_URL_FIVE_DAYS = `http://api.openweathermap.org/data/2.5/forecast?units=metric&q=${this.state.inputCity}&appid=2e2ff6c3d5791be198f04c78b94573e5`\n\n        fetch(this.FETCH_URL_FIVE_DAYS)\n            .then(response => (response.json()))\n            .then(result => {\n                if (result.cod === '200') {\n                    this.setState({\n                        isLoaded: true,\n                        data: result,\n                    })\n                } else {\n                    this.setState({\n                        isLoaded: true,\n                    })\n                }\n            })\n            .catch(error => {\n                this.setState({\n                    data: this.getInitialDataStateForFiveDays(),\n                    isLoaded: true,\n                    error\n                });\n            })\n    };\n    \n    static contextType = RechartInputContext;\n\n    handleForecastInput = (event) => {\n        event.preventDefault()\n        this.setState({ inputCity: event.target.value })\n    }\n\n    makeForecastFetch = () => {\n        this.getFiveDaysForecast()\n        this.setState({ inputCity: '' })\n    }\n\n    render() {\n        const { data, isLoaded } = this.state;\n        const { rechartInputData } = this.context;\n        const cityName = data.city.name;\n        const isInputCityEntered = isLoaded ?\n            <div>\n                <H1>Choose your city</H1>\n                <FormControl>\n                    <Input\n                        value={this.state.inputCity}\n                        onChange={this.handleForecastInput}\n                        placeholder=\"Insert city name here\"\n                        style={{ color: 'white' }}>\n                    </Input>\n                    <Button\n                        color=\"disable\"\n                        variant=\"contained\"\n                        onClick={this.makeForecastFetch}>\n                            Get current weather\n                    </Button>\n                </FormControl>\n                <H3>Weather forecast for city:{cityName}</H3>\n                {data.list.length > 0 ?\n                    <div>\n                        <RechartInput data={data} /> \n                        {rechartInputData ?\n                            <WeatherRechart data={data} />\n                            :\n                            <Text>Please choose date to display forecast rechart</Text>}\n                    </div>\n                    :\n                    <Text>Please enter city name to display forecast</Text>}\n            </div>\n            :\n            <div>\n                <H1>Choose your city</H1>\n                <FormControl>\n                    <Input\n                        value={this.state.inputCity}\n                        onChange={this.handleForecastInput}\n                        placeholder=\"Insert city name here\"\n                        style={{ color: 'white' }}>\n                    </Input>\n                    <Button\n                        onClick={this.makeForecastFetch}>\n                            Get weather forecast\n                    </Button>\n                </FormControl>\n                <H1>No city entered</H1>\n            </div>\n        return (\n            <Wrapper>\n                {isInputCityEntered}\n            </Wrapper>\n        );\n    }\n};\n\nexport default FiveDaysForecast;","import styled from 'styled-components';\n\nexport const Navigation = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 60%;\n    margin: auto;\n    padding-top: 20px;\n    padding-bottom: 20px;\n    align-items: center;\n\n@media (min-width: 880px) {\n        flex-direction: row;\n        align-items: center;\n        justify-content: space-evenly;\n        width: 60%;\n        margin: auto;\n        padding-top: 20px;\n        padding-bottom: 20px;\n}\n\n`\nexport const Button = styled.a`\n        margin: 10px;\n        min-width: 217px;\n        text-align: center;\n        border-radius: 10px;\n        text-decoration: none;\n        color: white;\n        text-shadow: 2px 2px 0px rgba(184,134,11,0.79);\n        border: 3px solid darkgoldenrod;\n        padding: 10px;\n        font-size: medium;\n        max-width: 290px;\n        \n`\n\n","import React from 'react';\nimport { Navigation, Button } from './styled/StyledNavigation';\n\nconst SiteNavigation = () => {\n\n    return (\n            <Navigation>\n                <Button as=\"a\" href=\"/\"> Current weather </Button>\n                <Button as=\"a\" href='/GeoLocation' > Weather with GeoLocation </Button>\n                <Button as=\"a\" href=\"/FiveDays\" > Five days forecast </Button>\n            </Navigation>\n    )\n}\n\nexport default SiteNavigation;","import styled from 'styled-components';\n\nexport const Button = styled.button`\n    color: white;\n    background-color: rgba(184,134,11);\n    border-radius: 10px;\n    cursor: pointer;\n    border: none;\n    padding: 10px 26px;\n    font-size: 14px;\n    margin: 10px;\n    outline: none;\n`\n\nexport const ButtonDisabled = styled(Button)`\n    background-color: rgba(184,134,11, 0.4);\n`","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    justify-context: center;\n    flex-direction: column;\n    padding: 10px;\n    color: white;\n`\n","import styled from 'styled-components';\n\nexport const WeatherInfo = styled.div`\n    display: flex;\n    flex-direction: column;\n    padding: 10px;\n    color: white;\n    text-align: center;\n    width: 100%;\n    \n`\n","import styled from 'styled-components';\n\nexport const Data = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 10px;\n    font-size: 20px;\n`","import styled from 'styled-components';\n\nexport const Text = styled.div`\n    margin: 0;\n    padding-top: 10px;\n    font-size: 16px;\n\n`","import React, { Component } from 'react';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport { Button, ButtonDisabled } from './styled/StyledButton';\nimport { Wrapper } from './styled/StyledCurrentWeatherWithGeoLocation';\n// import MapContainer from '../Map/Map';\nimport { WeatherInfo } from './styled/StyledWeatherInfo';\nimport { Data } from './styled/StyledData';\nimport { Text } from './styled/StyledText';\nimport { H1 } from '../../pages/Home/styled/StyledTags';\n\nclass CurrentWeatherWithGeoLocation extends Component {\n\n    state = {\n        data: this.getInitialDataState(),\n        isLoading: false,\n        isLoaded: false,\n        locationLoaded: false,\n        error: null,\n        latitude: null,\n        longitude: null,\n    }\n\n    getInitialDataState() {\n        return {\n            weather: [],\n            main: {\n                temp: null,\n                feels_like: null,\n            },\n            wind: {\n                speed: null,\n                deg: null,\n            },\n            name: \"\",\n        }\n    };\n\n    getGeoPosition = () => {\n        this.setState({\n            isLoading: true,\n        });\n        navigator.geolocation.getCurrentPosition(\n            position => this.setState({\n                latitude: position.coords.latitude,\n                longitude: position.coords.longitude,\n                locationLoaded: true,\n                isLoading: false,\n            }),\n        );\n    }\n\n    getCurrentWeatherWithGeoLocation = () => {\n        this.FETCH_URL_GEOLOCATION = `http://api.openweathermap.org/data/2.5/weather?lat=${this.state.latitude}&lon=${this.state.longitude}&units=metric&appid=2e2ff6c3d5791be198f04c78b94573e5`\n\n        fetch(this.FETCH_URL_GEOLOCATION)\n            .then(response => (response.json()))\n            .then(result => {\n                if (result.cod === 200) {\n                    this.setState({\n                        isLoaded: true,\n                        isLoading: false,\n                        data: result,\n                    })\n                } else {\n                    this.setState({\n                        isLoaded: true,\n                        isLoading: false,\n                    })\n                }\n            })\n            .catch(error => {\n                this.setState({\n                    data: this.getInitialDataState(),\n                    isLoaded: true,\n                    isLoading: false,\n                    error\n                });\n            })\n    }\n    render() {\n        const { isLoading, locationLoaded, data, isLoaded } = this.state\n        const loadingGeoLocalisation = isLoading ?\n            <>\n                <h3>Your current position is:</h3>\n                <p>latitude: Loading...</p>\n                <p>longitude: Loading...</p>\n            </> \n            :\n            <>\n                <h3>Your current position:</h3>\n                {/* <MapContainer state={this.state}/> */}\n                <p>latitude: {this.state.latitude}</p>\n                <p>longitude: {this.state.longitude}</p>\n            </>\n        const showGetCurrentWeatherButton = locationLoaded ?\n            <Button \n                onClick={this.getCurrentWeatherWithGeoLocation}>Get current weather\n            </Button> :\n            <ButtonDisabled \n                disabled={true}>Get current weather\n            </ButtonDisabled>\n\n        const cityName = data.name;\n        const currentTemp = data.main.temp;\n        const sensedTemp = Math.round(data.main.feels_like);\n        const windSpeed = data.wind.speed;\n        const windDirection = data.wind.deg;\n        const description = data.weather.map(element =>\n            <div key={element.id}>\n                {element.description}\n            </div>\n        );\n        const isFetchDataLoaded = isLoaded ?\n            <WeatherInfo>\n                <Data>\n                    City Name:\n                    <Text>{cityName}</Text>\n                </Data>\n                <Data>\n                    Current Temp:\n                    <Text>{currentTemp} &deg;C</Text>\n                </Data>\n                <Data>\n                    Sensed Temp:\n                    <Text>{sensedTemp} &deg;C</Text>\n                </Data>\n                <Data>\n                    Wind Speed:\n                    <Text>{`${windSpeed} km/h`}</Text>\n                </Data>\n                <Data>\n                    Wind Direction:\n                     <Text>\n                        <ArrowUpwardIcon\n                            style={{ transform: `rotate(${windDirection}deg)` }} >\n                        </ArrowUpwardIcon>\n                    </Text>\n                </Data>\n                <Data>\n                    Description:\n                    <Text>{description}</Text>\n                </Data>\n            </WeatherInfo> : null;\n        return (\n            <div>\n                <Wrapper>\n                    <H1>Get current weather <br></br>by geolocation</H1>\n                    {loadingGeoLocalisation}\n                    <Button\n                        color=\"disable\"\n                        variant=\"contained\"\n                        onClick={this.getGeoPosition}>\n                        Get current position\n                    </Button>\n                    {showGetCurrentWeatherButton}\n                    {isFetchDataLoaded}\n                </Wrapper>\n            </div>\n        )\n    }\n}\n\nexport default CurrentWeatherWithGeoLocation;","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    width: 100%;\n    height:100vh;\n`","import React from 'react';\nimport CurrentWeatherWithGeoLocation from '../../components/CurrentWeatherWithGeoLocation/CurrentWeatherWithGeoLocation';\nimport { Wrapper } from './styled/Wrapper';\n\nfunction CurrentWeatherWithLocation() {\n\n    return (\n        <Wrapper>\n            <CurrentWeatherWithGeoLocation />\n        </Wrapper>\n    )\n}\n\nexport default CurrentWeatherWithLocation;","import styled from 'styled-components';\n\nexport const StyledNav = styled.div`\n\n    height: 100%;\n    background-image: linear-gradient(to bottom,rgba(13,75,100,0.9),60%,rgba(0,0,0,0));\n    max-width: 1918px;\n`","import styled from 'styled-components';\n\nexport const Overlay = styled.div`\n    background-color: rgba(0,0,0, 0.5);\n    width:100%;\n    height: 100%;\n    max-width: 1918px;\n`","import React, { useState, useMemo } from 'react';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Home from '../pages/Home/Home';\nimport Header from '../components/Header/Header';\nimport DefaultPage from '../pages/DefaultPage/DefaultPage';\nimport FiveDaysForecast from '../pages/FiveDaysForecast/FiveDaysForecast';\nimport SiteNavigation from '../components/SiteNavigation/SiteNavigation';\nimport RechartInputContext from '../context/RechartInputContext';\nimport CurrentWeatherWithLocation from '../pages/CurrentWeatherWithLocation/CurrentWeatherWithLocation';\nimport { StyledNav } from './style/StyledApp';\nimport { Overlay } from './style/StyledOverlay';\n\n\nfunction App() {\n\n  const [rechartInputData, setRechartInputData] = useState();\n  const rechartProviderValue = useMemo(() => ({\n    rechartInputData, setRechartInputData\n  }), [rechartInputData, setRechartInputData\n  ]);\n\n\n  return (\n    <BrowserRouter>\n      <Overlay>\n        <StyledNav>\n          <Header />\n          <SiteNavigation />\n        </StyledNav>\n        <RechartInputContext.Provider value={rechartProviderValue}>\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/FiveDays' component={FiveDaysForecast} />\n            <Route path='/GeoLocation' component={CurrentWeatherWithLocation} />\n            <Route component={DefaultPage} />\n          </Switch>\n        </RechartInputContext.Provider>\n      </Overlay>\n    </BrowserRouter>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';  \nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}