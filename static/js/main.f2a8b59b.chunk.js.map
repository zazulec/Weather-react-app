{"version":3,"sources":["styled/StyledH1.js","styled/StyledH3.js","theme/theme.js","pages/Home/styled/StyledWrapper.js","pages/Home/styled/StyledCurrentWeatherContainer.js","pages/Home/styled/StyledWeatherInfo.js","pages/Home/styled/StyledButton.js","pages/Home/styled/StyledData.js","pages/Home/styled/StyledText.js","pages/Home/Home.js","devicesBrakpoints/devicesBrakpoints.js","components/Header/styled/StyledHeader.js","components/Header/Header.tsx","pages/DefaultPage/styled/StyledTitle.js","pages/DefaultPage/DefaultPage.js","context/RechartInputContext.js","components/WeatherRechart/styled/StyledOverlay.js","components/WeatherRechart/WeatherRechart.js","components/RechartInput/styled/StyledText.js","components/RechartInput/RechartInput.tsx","pages/FiveDaysForecast/styled/Wrapper.js","pages/FiveDaysForecast/styled/StyledButton.js","pages/FiveDaysForecast/styled/StyledText.js","pages/FiveDaysForecast/styled/SmallWrapper.js","pages/FiveDaysForecast/FiveDaysForecast.js","components/SiteNavigation/styled/StyledNavigation.js","components/SiteNavigation/styled/StyledButton.js","components/SiteNavigation/SiteNavigation.js","components/CurrentWeatherWithGeoLocation/styled/StyledButton.js","components/CurrentWeatherWithGeoLocation/styled/StyledWrapper.js","components/Map/styled/StyledWrapper.js","components/Map/Map.js","components/LoadingGeoLocalisation/LoadingGeoLocalisation.js","components/FetchDataLoaded/styled/StyledWeatherInfo.js","components/FetchDataLoaded/styled/StyledCategoryResult.js","components/FetchDataLoaded/styled/StyledData.js","components/FetchDataLoaded/styled/StyledText.js","components/FetchDataLoaded/FetchDataLoaded.js","components/CurrentWeatherWithGeoLocation/CurrentWeatherWithGeoLocation.js","pages/CurrentWeatherWithLocation/styled/Wrapper.js","pages/CurrentWeatherWithLocation/CurrentWeatherWithLocation.js","styled/StyledNav.js","styled/StyledAppOverlay.js","App.js","serviceWorker.js","index.js"],"names":["H1","styled","h1","H3","h3","colors","theme","white","gold","goldshadow","buttonDisable","overlay","appOverlay","Wrapper","div","CurrentWeatherContainer","WeatherInfo","Button","button","Data","Text","Home","state","data","getInitialDataState","isLoaded","error","inputCity","getWeatherData","FETCH_URL_DAY","fetch","then","response","json","result","cod","setState","catch","handleCurrentWeatherInput","event","preventDefault","target","value","makeCurrentWeatherFetch","weather","main","temp","feels_like","wind","speed","deg","name","this","city","cityName","currentTemp","sensedTemp","Math","round","windSpeed","windDirection","description","map","element","key","id","isInputCityEntered","Input","onChange","placeholder","style","color","onClick","transform","FormControl","variant","Component","size","device","mobile","screen","HeaderH1","Header","Title","DefaultPage","RechartInputContext","createContext","Overlay","WeatherRechart","props","rechartInputData","useContext","list","filter","dt_txt","includes","toString","slice","temperature","sensedTemperature","amt","aspect","width","height","margin","top","right","bottom","left","verticalAlign","type","dataKey","stroke","ill","fill","strokeDasharray","useStyles","makeStyles","formControl","spacing","minWidth","selectEmpty","marginTop","RechartInput","classes","setRechartInputData","dayCurrent","dayOne","dayTwo","dayThree","dayFour","dayFive","className","form","InputLabel","Select","labelId","MenuItem","aria-label","defaultValue","p","SmallWrapper","FiveDaysForecast","getInitialDataStateForFiveDays","handleForecastInput","makeForecastFetch","getFiveDaysForecast","FETCH_URL_FIVE_DAYS","context","length","contextType","Navigation","a","SiteNavigation","as","href","ButtonDisabled","GoogleApiWrapper","apiKey","google","zoom","initialCenter","lat","latitude","lng","longitude","onMarkerClick","LoadingGeoLocalisation","isLoading","loadingGeoLocalisation","CategoryResult","FetchDataLoaded","info","isFetchDataLoaded","CurrentWeatherWithGeoLocation","locationLoaded","getGeoPosition","navigator","geolocation","getCurrentPosition","position","coords","getCurrentWeatherWithGeoLocation","FETCH_URL_GEOLOCATION","showMap","Map","showGetCurrentWeatherButton","disabled","CurrentWeatherWithLocation","StyledNav","StyledAppOverlay","App","useState","rechartProviderValue","useMemo","Provider","basename","exact","patch","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.f2a8b59b.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const H1 = styled.h1`\n    text-align: center;\n    font-size: 30px;\n    padding: 20px;\n\n`","import styled from 'styled-components';\n\nexport const H3 = styled.h3`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    font-size: 20px;\n    \n`\n\n","const colors = {\n\n    white: 'rgb( 255,255,255)',\n    gold: 'rgba(184, 134, 11, 1)',\n    goldshadow: 'rgba(184,134,11,0.79)',\n    buttonDisable: 'rgba(184,134,11, 0.4)',\n    overlay: 'rgba(0, 0, 0, 0.1)',\n    appOverlay: 'rgba(0,0,0, 0.5)'\n\n};\n\nconst theme = {\n\n    white: `${colors.white}`,\n    gold: `${colors.gold}`,\n    goldshadow: `${colors.goldshadow}`,\n    buttonDisable: `${colors.buttonDisable}`,\n    overlay: `${colors.overlay}`,\n    appOverlay: `${colors.appOverlay}`,\n    \n}\n\nexport { theme };\n","import styled from 'styled-components';\nimport { theme } from '../../../theme/theme';\n\nexport const Wrapper = styled.div `\n    display: flex;\n    flex-direction: column;\n    align-items: baseline;\n    width: 100%;\n    height: 100vh;\n    color: ${theme.white};\n    \n    \n`\n","import styled from 'styled-components';\n\n\nexport const CurrentWeatherContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    width: 100%;\n\n`\n\n","import styled from 'styled-components';\nimport { theme } from '../../../theme/theme';\n\nexport const WeatherInfo = styled.div`\n    display: flex;\n    flex-direction: column;\n    padding: 10px;\n    color: ${theme.white};\n    text-align: center;\n    width: 100%;\n    \n`\n","import styled from 'styled-components';\nimport { theme } from '../../../theme/theme';\n\nexport const Button = styled.button`\n    color: ${theme.white};\n    background-color: ${theme.gold};\n    border-radius: 10px;\n    cursor: pointer;\n    border: none;\n    padding: 10px 26px;\n    font-size: 14px;\n    margin: 10px;\n    outline: none;\n    \n`","import styled from 'styled-components';\n\nexport const Data = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding-top: 10px;\n    font-size: 20px;\n    \n`","import styled from 'styled-components';\n\nexport const Text = styled.div`\n    margin: 0;\n    padding-top: 10px;\n    font-size: 16px;\n\n`","import React, { Component } from 'react';\nimport { Input, FormControl } from '@material-ui/core';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport { H1 } from '../../styled/StyledH1';\nimport { H3 } from '../../styled/StyledH3';\nimport { Wrapper } from './styled/StyledWrapper';\nimport { CurrentWeatherContainer } from './styled/StyledCurrentWeatherContainer';\nimport { WeatherInfo } from './styled/StyledWeatherInfo';\nimport { Button } from './styled/StyledButton';\nimport { Data } from './styled/StyledData';\nimport { Text } from './styled/StyledText';\n\nclass Home extends Component {\n\n    state = {\n        data: this.getInitialDataState(),\n        isLoaded: false,\n        error: null,\n        inputCity: '',\n    };\n\n    getInitialDataState() {\n        return {\n            weather: [],\n            main: {\n                temp: null,\n                feels_like: null,\n            },\n            wind: {\n                speed: null,\n                deg: null,\n            },\n            name: \"\",\n        }\n    };\n\n    getWeatherData = () => {\n        const FETCH_URL_DAY = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.inputCity}&units=metric&appid=2e2ff6c3d5791be198f04c78b94573e5`;\n        const serverStatusCode = 200;\n\n        fetch(FETCH_URL_DAY)\n            .then(response => (response.json()))\n            .then(result => {\n                if (result.cod === serverStatusCode) {\n                    this.setState({\n                        isLoaded: true,\n                        data: result,\n                    })\n                } else {\n                    this.setState({\n                        isLoaded: true,\n                    })\n                }\n            })\n            .catch(error => {\n                this.setState({\n                    data: this.getInitialDataState(),\n                    isLoaded: true,\n                    error\n                });\n            })\n    };\n\n    handleCurrentWeatherInput = (event) => {\n        event.preventDefault()\n        this.setState({ inputCity: event.target.value })\n    }\n\n    makeCurrentWeatherFetch = () => {\n        this.getWeatherData()\n        this.setState({ inputCity: '' })\n    }\n\n    render() {\n        const { data, isLoaded, inputCity, city } = this.state;\n        const { name, main, wind, weather } = data;\n        const cityName = name;\n        const currentTemp = main.temp;\n        const sensedTemp = Math.round(main.feels_like);\n        const windSpeed = wind.speed;\n        const windDirection = wind.deg;\n        const description = weather.map(element =>\n            <div key={element.id}>\n                {element.description}\n            </div>\n        )\n        const isInputCityEntered = isLoaded ?\n            <>\n                <CurrentWeatherContainer>\n                    <H1>Choose your city:</H1>\n                    <Input\n                        value={inputCity}\n                        onChange={this.handleCurrentWeatherInput}\n                        placeholder=\"Insert city name here\"\n                        style={{ color: 'white' }}>\n                    </Input>\n                    <Button\n                        onClick={this.makeCurrentWeatherFetch}>\n                        Get current weather\n                    </Button>\n                </CurrentWeatherContainer>\n                <WeatherInfo>\n                    {cityName ?\n                        <H3>\n                            Current weather in city:\n                            <Text>{cityName}</Text>\n                        </H3>\n                        :\n                        <H3> Please insert city name or write it corectly.</H3>}\n                    <Data>\n                        Description:\n                        <Text>{description}</Text>\n                    </Data>\n                    <Data>\n                        Current temperature:\n                        <Text>{currentTemp} &deg;C</Text>\n                    </Data>\n                    <Data>\n                        Sensed temperature:\n                        <Text>{sensedTemp} &deg;C</Text>\n                    </Data>\n                    <Data>\n                        Wind speed:\n                        <Text>{`${windSpeed} km/h`}</Text>\n                    </Data>\n                    <Data>\n                        Wind direction:\n                        <Text>\n                            <ArrowUpwardIcon\n                                style={{ transform: `rotate(${windDirection}deg)` }} >\n                            </ArrowUpwardIcon>\n                        </Text>\n                    </Data>\n\n                </WeatherInfo>\n            </>\n            :\n            <>\n                <CurrentWeatherContainer>\n                    <H1>Choose your city</H1>\n                    <FormControl>\n                        <Input\n                            value={city}\n                            onChange={this.handleCurrentWeatherInput}\n                            placeholder=\"Insert city name here\"\n                            style={{ color: 'white' }}>\n                        </Input>\n                        <Button\n                            color=\"disable\"\n                            variant=\"contained\"\n                            onClick={this.makeCurrentWeatherFetch}>\n                            Get current weather\n                        </Button>\n                    </FormControl>\n                    <H1>No city entered</H1>\n                </CurrentWeatherContainer>\n            </>\n\n\n        return (\n            <Wrapper>\n                {isInputCityEntered}\n            </Wrapper>\n        )\n    }\n}\n\nexport { Home };","const size = {\n    mobile: '880px',\n    screen: '1025px',\n};\n\nconst device = {\n    mobile: `(min-width: ${size.mobile})`,\n    screen: `(min-width: ${size.screen})`,\n};\n\nexport { device };\n\n","import styled from 'styled-components';\nimport { device } from '../../../devicesBrakpoints/devicesBrakpoints';\nimport { theme } from '../../../theme/theme';\n\nexport const HeaderH1 = styled.h1`\n    display: flex;\n    align-items: center;\n    text-align: center;\n    justify-content: center;\n    font-size: 30px;\n    padding: 10px; \n    color: ${theme.gold};\n    margin: 0;\n    color: white;\n    text-shadow: 2px 2px 0px ${theme.goldshadow};\n\n@media ${device.mobile} {\n        font-size: 42px;\n\n};\n\n@media ${device.screen}{ \n        font-size: 50px;\n\n};\n\n`","import React from 'react';\nimport { HeaderH1 } from './styled/StyledHeader';\n\nfunction Header() {\n\n    return (\n            <HeaderH1>\n                Probably the best weather app in this repository!\n            </HeaderH1>\n    )\n}\n\nexport { Header };","import styled from 'styled-components';\nimport { theme } from '../../../theme/theme';\n\nexport const Title = styled.h1`\n    display: flex;\n    text-align: center;\n    justify-content: center;\n    font-size: 50px;\n    padding: 10px; \n    color: ${theme.white};\n    text-shadow: 2px 2px 0px ${theme.goldshadow}; \n    margin-bottom: 0;\n    height: 100vh;\n}\n`","import React, { Component } from 'react';\nimport { Title } from './styled/StyledTitle';\n\nclass DefaultPage extends Component {\n    render() {\n        return (\n            <Title>\n                <p>\n                    404\n                    <br></br>\n                    Ups, you got lost!\n                    <br></br>\n                    You are on the wrong path. Please try repair Url address.\n                </p>\n            </Title>\n        )\n    }\n}\n\nexport { DefaultPage };","import { createContext } from 'react';\n\nconst RechartInputContext = createContext('');\n\nexport { RechartInputContext };","import styled from 'styled-components';\nimport { theme } from '../../../theme/theme';\n\nexport const Overlay = styled.div`\n    background-color: ${theme.overlay};\n    width: 100%;\n    margin-top: 20px;\n    \n`\n\n","import React, { useContext } from 'react';\nimport { RechartInputContext } from '../../context/RechartInputContext'\nimport { LineChart, Line, ResponsiveContainer, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { Overlay } from './styled/StyledOverlay';\n\n\nfunction WeatherRechart(props) {\n\n    const { rechartInputData } = useContext(RechartInputContext);\n    const data = props.data.list\n        .filter(element => element.dt_txt.includes(rechartInputData))\n        .map(element => {\n            return {\n                name: element.dt_txt.toString().slice(10, 16),\n                temperature: element.main.temp,\n                sensedTemperature: element.main.feels_like, amt: 60\n            }\n        });\n\n    return (\n            <Overlay>\n                <ResponsiveContainer aspect={5} width=\"100%\" height=\"100%\">\n                    <LineChart \n                    width={500}\n                    height={500}\n                    margin={{ top: 5, right: 30, bottom: 5, left: 0 }}\n                    data={rechartInputData ? data : null}>\n                    <Legend verticalAlign=\"top\" height={36} />\n                        <Line\n                            name='Temperature'\n                            type=\"monotone\"\n                            dataKey=\"temperature\"\n                            stroke=\"#8884d8\"\n                            ill=\"#8884d8\" />\n                        <Line\n                            name='Sensed temperature'\n                            type=\"monotone\"\n                            dataKey=\"sensedTemperature\"\n                            stroke=\"pink\" fill=\"pink\" />\n                        <CartesianGrid\n                            stroke=\"#ccc\"\n                            strokeDasharray=\"5 5\" />\n                        <XAxis dataKey=\"name\" />\n                        <YAxis />\n                        <Tooltip />\n                    </LineChart>\n                </ResponsiveContainer>\n            </Overlay>\n\n    );\n}\n\nexport { WeatherRechart };","import styled from 'styled-components';\nimport { theme } from '../../../theme/theme';\n\nexport const Text = styled.div`\n    color: ${theme.white};\n\n`\n","import React, { useContext } from 'react';\nimport { RechartInputContext } from '../../context/RechartInputContext';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { Text } from './styled/StyledText';\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\ninterface Data {\n    list: any;\n    dt_txt: any | string;\n};\n\ninterface RechartInputProps {\n    data: Data;\n    rechartInputData: any;\n    setRechartInputData: any;\n\n};\n\n\nfunction RechartInput(props: RechartInputProps) {\n    \n    const classes: any = useStyles();\n    const { rechartInputData, setRechartInputData }: any = useContext(RechartInputContext);\n    \n    const dayCurrent = props.data.list[0].dt_txt.toString().slice(0, -9);\n    const dayOne = props.data.list[0 + 8].dt_txt.toString().slice(0, -9);\n    const dayTwo = props.data.list[0 + 16].dt_txt.toString().slice(0, -9);\n    const dayThree = props.data.list[0 + 24].dt_txt.toString().slice(0, -9);\n    const dayFour = props.data.list[0 + 32].dt_txt.toString().slice(0, -9);\n    const dayFive = props.data.list[0 + 39].dt_txt.toString().slice(0, -9);\n\n    const handleInputChange = (event: any) => {\n        setRechartInputData(event.target.value);\n    };\n\n  \n    return (\n        <div>\n            <FormControl className={classes.form} >\n                <InputLabel\n                    id=\"demo-simple-select-helper-label\"\n                    style={{ color: 'white' }}>\n                    Data\n                </InputLabel>\n                <Select\n                    labelId=\"demo-simple-select-helper-label\"\n                    id=\"demo-simple-select-helper\"\n                    value={rechartInputData}\n                    onChange={handleInputChange}\n                    style={{ color: 'white' }}\n                >\n                    <MenuItem aria-label={\"None\"} defaultValue=\"\">None</MenuItem>\n                    <MenuItem value={dayCurrent.toString()}>{dayCurrent}</MenuItem>\n                    <MenuItem value={dayOne.toString()}>{dayOne}</MenuItem>\n                    <MenuItem value={dayTwo.toString()}>{dayTwo}</MenuItem>\n                    <MenuItem value={dayThree.toString()}>{dayThree}</MenuItem>\n                    <MenuItem value={dayFour.toString()}>{dayFour}</MenuItem>\n                    <MenuItem value={dayFive.toString()}>{dayFive}</MenuItem>\n                </Select>\n                <Text>\n                    Chose data to display forecast\n                </Text>\n            </FormControl>\n        </div>\n\n\n    );\n}\n\nexport { RechartInput };","import styled from 'styled-components';\nimport { theme } from '../../../theme/theme';\n\nexport const Wrapper = styled.div `\n    display: flex;\n    justify-content: center;\n    flex-direction: initial;\n    text-align: center;\n    width: 100%;\n    height: 100vh;\n    color: ${theme.white};\n    overflow: scroll;\n    \n`\n","import styled from 'styled-components';\nimport { theme } from '../../../theme/theme';\n\nexport const Button = styled.button`\n    color: ${theme.white};\n    background-color: ${theme.gold};\n    border-radius: 10px;\n    cursor: pointer;\n    border: none;\n    padding: 10px 26px;\n    font-size: 14px;\n    margin: 10px;\n    outline: none;\n    \n`","import styled from 'styled-components';\n\nexport const Text = styled.p`\n    padding: 10px;\n    \n`","import styled from 'styled-components';\n\nexport const SmallWrapper = styled.div`\n    width:100%;\n`\n","import React, { Component } from 'react';\nimport { Input, FormControl } from '@material-ui/core';\nimport { WeatherRechart } from '../../components/WeatherRechart/WeatherRechart';\nimport { RechartInput } from '../../components/RechartInput/RechartInput';\nimport { RechartInputContext } from '../../context/RechartInputContext';\nimport { Wrapper } from './styled/Wrapper';\nimport { Button } from './styled/StyledButton';\nimport { H1 } from '../../styled/StyledH1';\nimport { H3 } from '../../styled/StyledH3';\nimport { Text } from './styled/StyledText';\nimport { SmallWrapper } from './styled/SmallWrapper';\n\nclass FiveDaysForecast extends Component {\n\n    state = {\n        data: this.getInitialDataStateForFiveDays(),\n        isLoaded: false,\n        error: null,\n        inputCity: \" \",\n\n    };\n\n    getInitialDataStateForFiveDays() {\n        return {\n            list: [],\n            weather: [],\n            main: {\n                temp: null,\n                feels_like: null,\n            },\n            wind: {\n                speed: null,\n                deg: null,\n            },\n            city: {\n                name: '',\n            },\n            dt_txt: '',\n        }\n    };\n\n    getFiveDaysForecast() {\n        const FETCH_URL_FIVE_DAYS = `https://api.openweathermap.org/data/2.5/forecast?units=metric&q=${this.state.inputCity}&appid=2e2ff6c3d5791be198f04c78b94573e5`;\n        const serverStatusCode = '200';\n\n        fetch(FETCH_URL_FIVE_DAYS)\n            .then(response => (response.json()))\n            .then(result => {\n                if (result.cod === serverStatusCode) {\n                    this.setState({\n                        isLoaded: true,\n                        data: result,\n                    })\n                } else {\n                    this.setState({\n                        isLoaded: true,\n                    })\n                }\n            })\n            .catch(error => {\n                this.setState({\n                    data: this.getInitialDataStateForFiveDays(),\n                    isLoaded: true,\n                    error\n                });\n            })\n    };\n\n    static contextType = RechartInputContext;\n\n    handleForecastInput = (event) => {\n        event.preventDefault()\n        this.setState({ inputCity: event.target.value })\n    }\n\n    makeForecastFetch = () => {\n        this.getFiveDaysForecast()\n\n        this.setState({ inputCity: '' })\n    }\n\n    render() {\n        const { data, isLoaded, inputCity } = this.state;\n        const { city, list } = data;\n        const { rechartInputData } = this.context;\n        const isInputCityEntered = isLoaded ?\n            <SmallWrapper>\n                <H1>Choose your city</H1>\n                <FormControl>\n                    <Input\n                        value={inputCity}\n                        onChange={this.handleForecastInput}\n                        placeholder=\"Insert city name here\"\n                        style={{ color: 'white' }}>\n                    </Input>\n                    <Button\n                        color=\"disable\"\n                        variant=\"contained\"\n                        onClick={this.makeForecastFetch}>\n                        Get current weather\n                    </Button>\n                </FormControl>\n                <H3>Weather forecast for city:{city.name}</H3>\n                {list.length > 0 ?\n                    <SmallWrapper>\n                        <RechartInput data={data} />\n                        {rechartInputData ?\n                            <WeatherRechart data={data} />\n                            :\n                            <Text>Please choose date to display forecast rechart</Text>}\n                    </SmallWrapper>\n                    :\n                    <Text>Please enter city name to display forecast</Text>}\n            </SmallWrapper>\n            :\n            <SmallWrapper>\n                <H1>Choose your city</H1>\n                <FormControl>\n                    <Input\n                        value={inputCity}\n                        onChange={this.handleForecastInput}\n                        placeholder=\"Insert city name here\"\n                        style={{ color: 'white' }}>\n                    </Input>\n                    <Button\n                        onClick={this.makeForecastFetch}>\n                        Get weather forecast\n                    </Button>\n                </FormControl>\n                <H1>No city entered</H1>\n            </SmallWrapper>\n        return (\n            <Wrapper>\n                {isInputCityEntered}\n            </Wrapper>\n        );\n    }\n};\n\nexport { FiveDaysForecast };","import styled from 'styled-components';\nimport { device } from '../../../devicesBrakpoints/devicesBrakpoints';\n\nexport const Navigation = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 60%;\n    margin: auto;\n    padding-top: 20px;\n    padding-bottom: 20px;\n    align-items: center;\n\n@media ${device.mobile} {\n        flex-direction: row;\n        align-items: center;\n        justify-content: space-evenly;\n        width: 60%;\n        margin: auto;\n        padding-top: 20px;\n        padding-bottom: 20px;\n        \n}\n\n`\n\n","import styled from 'styled-components';\nimport { theme } from '../../../theme/theme';\n\nexport const Button = styled.a`\n        margin: 10px;\n        min-width: 217px;\n        text-align: center;\n        border-radius: 10px;\n        text-decoration: none;\n        color: ${theme.white};\n        border: 3px solid ${theme.gold};\n        padding: 10px;\n        font-size: medium;\n        max-width: 290px;\n        \n`\n","import React from 'react';\nimport { Navigation } from './styled/StyledNavigation';\nimport { Button } from './styled/StyledButton';\n\nconst SiteNavigation = () => {\n\n    return (\n            <Navigation>\n                <Button as=\"a\" href=\"/\"> Current weather </Button>\n                <Button as=\"a\" href='/GeoLocation' > Weather with GeoLocation </Button>\n                <Button as=\"a\" href=\"/FiveDays\" > Five days forecast </Button>\n            </Navigation>\n    )\n}\n\nexport { SiteNavigation };","import styled from 'styled-components';\nimport { theme } from '../../../theme/theme';\n\nexport const Button = styled.button`\n    color: white;\n    background-color: ${theme.gold};\n    border-radius: 10px;\n    cursor: pointer;\n    border: none;\n    padding: 10px 26px;\n    font-size: 14px;\n    margin: 10px;\n    outline: none;\n    \n`\n\nexport const ButtonDisabled = styled(Button)`\n    background-color: ${theme.buttonDisable};\n\n`","import styled from 'styled-components';\nimport { theme } from '../../../theme/theme';\n\nexport const Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    padding: 10px;\n    height:100vh;\n    color: ${theme.white};\n    overflow: scroll;\n\n`\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    position: relative;\n    width: 300px;\n    height: 300px;\n`","import React from 'react';\nimport { GoogleApiWrapper, Marker, Map } from 'google-maps-react';\nimport { Wrapper } from './styled/StyledWrapper';\n\nconst API_KEY = \"AIzaSyD-cAqH3VApCmOxG30Gi89eEgGmo0AQkg4\"\n\n// interface MapContainerProps {\n//     google: any,\n//     initialCenter: any,\n//     state: {\n//         latitude: number,\n//         longitude: number,\n//     },\n//     onMarkerClick: () => void,\n//     name: {},\n//     zoom: string,\n// };\n\n\nfunction MapContainer(props/*:MapContainerProps*/) {\n   \n    return (\n        <Wrapper>\n            <Map\n                google={props.google}\n                zoom={15}\n                initialCenter={{\n                    lat: props.state.latitude,\n                    lng: props.state.longitude,\n                }}\n            >\n                <Marker\n                    onClick={props.onMarkerClick}\n                    name={'Current location'}\n                />\n            </Map>\n        </Wrapper>\n    )\n}\n\nexport default GoogleApiWrapper({\n    apiKey: (API_KEY)\n})(MapContainer);","import React from 'react';\n\n// interface LoadingGeoLocalisationProps {\n//     data: DataThisComponent;\n// };\n\n// interface DataThisComponent {\n//     isLoading: boolean;\n//     longitude: Number;\n//     latitude: Number;\n// }\n\nexport function LoadingGeoLocalisation(props/*:LoadingGeoLocalisationProps*/) {\n    \n    const { isLoading, longitude, latitude } = props.data;\n    const loadingGeoLocalisation = isLoading ?\n        <>\n            <h3>Your current position is:</h3>\n            <p>latitude: Loading...</p>\n            <p>longitude: Loading...</p>\n        </>\n        :\n        <>\n            <h3>Your current position:</h3>\n            <p>latitude: {latitude}</p>\n            <p>longitude: {longitude}</p>\n        </>\n\n    return (\n        <>\n            {loadingGeoLocalisation}\n        </>\n    )\n}","import styled from 'styled-components';\nimport { theme } from '../../../theme/theme';\n\nexport const WeatherInfo = styled.div`\n    display: flex;\n    flex-direction: column;\n    padding: 10px;\n    color: ${theme.white};\n    text-align: center;\n    width: 100%;\n    \n`\n","import styled from 'styled-components';\n\nexport const CategoryResult = styled.div`\n    display: flex;\n    flex-direction: row;\n    padding: 10px;\n    justify-content: center;\n    align-items: center;\n\n`","import styled from 'styled-components';\n\nexport const Data = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 10px;\n    font-size: 20px;\n`","import styled from 'styled-components';\n\nexport const Text = styled.div`\n    margin: 0;\n    padding-top: 10px;\n    font-size: 16px;\n\n`","import React from 'react';\nimport { WeatherInfo } from './styled/StyledWeatherInfo';\nimport { CategoryResult } from './styled/StyledCategoryResult';\nimport { Data } from './styled/StyledData';\nimport { Text } from './styled/StyledText';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\n\nexport function FetchDataLoaded(props) {\n\n    const { name, main, wind, weather } = props.data.data;\n    \n    const cityName = name;\n    const currentTemp = main.temp;\n    const sensedTemp = Math.round(main.feels_like);\n    const windSpeed = wind.speed;\n    const windDirection = wind.deg;\n    const info = weather.map(element =>\n        <div key={element.id}>\n            {element.description}\n        </div>\n    );\n    const isFetchDataLoaded = name ?\n    <WeatherInfo>\n        <CategoryResult>\n            <Data>\n                City Name:\n            <Text>{cityName}</Text>\n            </Data>\n            <Data>\n                Description:\n            <Text>{info}</Text>\n            </Data>\n        </CategoryResult>\n        <CategoryResult>\n            <Data>\n                Current Temp:\n            <Text>{currentTemp} &deg;C</Text>\n            </Data>\n            <Data>\n                Sensed Temp:\n            <Text>{sensedTemp} &deg;C</Text>\n            </Data>\n        </CategoryResult>\n        <CategoryResult>\n            <Data>\n                Wind Speed:\n            <Text>{`${windSpeed} km/h`}</Text>\n            </Data>\n            <Data>\n                Wind Direction:\n             <Text>\n                    <ArrowUpwardIcon\n                        style={{ transform: `rotate(${windDirection}deg)` }} >\n                    </ArrowUpwardIcon>\n                </Text>\n            </Data>\n        </CategoryResult>\n    </WeatherInfo> : null\n    \n    return (\n        <>\n        {isFetchDataLoaded}\n        </>\n        )\n};","import React, { Component } from 'react';\nimport { Button, ButtonDisabled } from './styled/StyledButton';\nimport { Wrapper } from './styled/StyledWrapper';\nimport MapContainer from '../Map/Map';\nimport { H1 } from '../../styled/StyledH1';\nimport { LoadingGeoLocalisation } from '../LoadingGeoLocalisation/LoadingGeoLocalisation';\nimport { FetchDataLoaded } from '../FetchDataLoaded/FetchDataLoaded';\n\nclass CurrentWeatherWithGeoLocation extends Component {\n\n    state = {\n        data: this.getInitialDataState(),\n        isLoading: false,\n        isLoaded: false,\n        locationLoaded: false,\n        error: null,\n        latitude: null,\n        longitude: null,\n    }\n\n    getInitialDataState() {\n        return {\n            weather: [],\n            main: {\n                temp: null,\n                feels_like: null,\n            },\n            wind: {\n                speed: null,\n                deg: null,\n            },\n            name: \"\",\n        }\n    };\n\n    getGeoPosition = () => {\n        this.setState({\n            isLoading: true,\n        });\n        navigator.geolocation.getCurrentPosition(\n            position => this.setState({\n                latitude: position.coords.latitude,\n                longitude: position.coords.longitude,\n                locationLoaded: true,\n                isLoading: false,\n            }),\n        );\n    }\n\n    getCurrentWeatherWithGeoLocation = () => {\n        const FETCH_URL_GEOLOCATION = `https://api.openweathermap.org/data/2.5/weather?lat=${this.state.latitude}&lon=${this.state.longitude}&units=metric&appid=2e2ff6c3d5791be198f04c78b94573e5`;\n\n        const serverStatusCode = 200;\n\n        fetch(FETCH_URL_GEOLOCATION)\n            .then(response => (response.json()))\n            .then(result => {\n                if (result.cod === serverStatusCode) {\n                    this.setState({\n                        isLoaded: true,\n                        isLoading: false,\n                        data: result,\n                    })\n                } else {\n                    this.setState({\n                        isLoaded: true,\n                        isLoading: false,\n                    })\n                }\n            })\n            .catch(error => {\n                this.setState({\n                    data: this.getInitialDataState(),\n                    isLoaded: true,\n                    isLoading: false,\n                    error\n                });\n            })\n            \n    };\n\n    render() {\n        const { locationLoaded } = this.state\n        \n        const showMap = locationLoaded ? <MapContainer state={this.state}/> : null\n        const showGetCurrentWeatherButton = locationLoaded ?\n            <Button\n                onClick={this.getCurrentWeatherWithGeoLocation}>Get current weather\n            </Button> :\n            <ButtonDisabled\n                disabled={true}>Get current weather\n            </ButtonDisabled>\n\n        \n        return (\n                <Wrapper>\n                    <H1>Get current weather <br></br>by geolocation</H1>\n                    <LoadingGeoLocalisation data={this.state}   />\n                    {showMap}\n                    <Button\n                        color=\"disable\"\n                        variant=\"contained\"\n                        onClick={this.getGeoPosition}>\n                        Get current position\n                    </Button>\n                    {showGetCurrentWeatherButton}\n                    <FetchDataLoaded data={this.state} />\n                </Wrapper>\n        )\n    }\n}\n\nexport { CurrentWeatherWithGeoLocation };","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    width: 100%;\n`","import React from 'react';\nimport { CurrentWeatherWithGeoLocation } from '../../components/CurrentWeatherWithGeoLocation/CurrentWeatherWithGeoLocation';\nimport { Wrapper } from './styled/Wrapper';\n\nfunction CurrentWeatherWithLocation() {\n\n    return (\n        <Wrapper>\n            <CurrentWeatherWithGeoLocation />\n        </Wrapper>\n    )\n}\n\nexport { CurrentWeatherWithLocation }; ","import styled from 'styled-components';\n\nexport const StyledNav = styled.div`\n    height: 100%;\n    background-image: linear-gradient(to bottom,rgba(13,75,100,0.9),60%,rgba(0,0,0,0));\n    max-width: 1918px;\n`","import styled from 'styled-components';\nimport { theme } from '../theme/theme';\n\nexport const StyledAppOverlay = styled.div`\n    background-color: ${theme.appOverlay};\n    width: 100%;\n    max-width: 1918px;\n`","import React, { useState, useMemo } from 'react';\nimport { Switch, Route, BrowserRouter, Link, HashRouter } from \"react-router-dom\";\nimport { Home } from './pages/Home/Home';\nimport { Header } from './components/Header/Header';\nimport { DefaultPage } from './pages/DefaultPage/DefaultPage';\nimport { FiveDaysForecast } from './pages/FiveDaysForecast/FiveDaysForecast';\nimport { SiteNavigation } from './components/SiteNavigation/SiteNavigation';\nimport { RechartInputContext } from './context/RechartInputContext';\nimport { CurrentWeatherWithLocation } from './pages/CurrentWeatherWithLocation/CurrentWeatherWithLocation';\nimport { StyledNav } from './styled/StyledNav';\nimport { StyledAppOverlay } from './styled/StyledAppOverlay';\n\n\nfunction App() {\n\n  const [rechartInputData, setRechartInputData] = useState();\n  const rechartProviderValue = useMemo(() => ({\n    rechartInputData, setRechartInputData\n  }), [rechartInputData, setRechartInputData\n  ]);\n\n\n  return (\n\n    <StyledAppOverlay>\n      <StyledNav>\n        <Header />\n        <SiteNavigation />\n      </StyledNav>\n      <RechartInputContext.Provider value={rechartProviderValue}>\n        <HashRouter basename={'https://zazulec.github.io/Weather-react-app/#'}>\n          <Switch>\n            <Route exact patch='/' component={Home} />\n            <Route patch='/GeoLocation' component={CurrentWeatherWithLocation} />\n            <Route patch='/FiveDays' component={FiveDaysForecast} />\n            <Route component={DefaultPage} />\n          </Switch>\n        </HashRouter>\n      </RechartInputContext.Provider>\n    </StyledAppOverlay>\n\n\n  );\n}\n\nexport { App };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';  \nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}